.TH HSH 1 "July 2023" "Version 1.0" "Simple Shell User Manual"

.SH NAME
hsh - command interpreter (simple shell)

.SH SYNOPSIS
.B hsh
[filename]

.SH DESCRIPTION
.B hsh
is a simple shell, a command interpreter that reads lines from either a file or the terminal, interprets them, and executes other commands. It is designed for interactive and non-interactive use (shell scripts). The shell provides a set of features to aid interactive use and supports the common interpretative language for both modes.

.SH INVOCATION
The first non-option argument specified on the command line will be treated as the name of a file from which to read commands (a shell script). Otherwise, the shell reads commands from its standard input.

.SH COMMANDS
The shell interprets the words it reads according to a language, which is outside the scope of this man page. A line is read, and if the first word of the line is not a keyword or after a control operator, the shell recognizes it as a simple command. Otherwise, a complex command or some other special construct may have been recognized.

.SH SEARCH AND EXECUTION
The shell executes three types of commands: simple shell functions, built-in commands, and normal programs. The shell searches for the command in that order. Shell functions and built-in commands are executed internally without spawning new processes. Normal programs are searched for in the file system. If a program is not a normal executable file and appears to be a text file, the shell will run a new instance of `sh` to interpret it.

.SH PATH SEARCH
The shell first looks for a shell function or a built-in command by name. If not found, it searches for the command in each entry of the PATH variable. The value of PATH should be a series of directories separated by colons. The current directory may be indicated implicitly by an empty directory name or explicitly by a single period.

.SH COMMAND EXIT STATUS
Each command has an exit status, where zero indicates success, and a non-zero value indicates failure or an error. If a command is terminated by a signal, its exit status is greater than 128. If there is no command word, the exit status is the exit status of the last command substitution executed or zero if the command does not contain any substitutions.

.SH ENVIRONMENT
Environment variables affecting the execution of `sh`:
- ENV: Initialization file for interactive shells.

.SH EXIT STATUS
Errors detected by the shell cause it to exit with a non-zero exit status. In non-interactive mode, the execution of the shell file is aborted. In interactive mode, the shell returns the exit status of the last command executed or the argument given to the `exit` builtin.

.SH EXAMPLES
Below are examples of interactive and non-interactive mode:

Interactive mode:
$ ./hsh
($) /bin/ls
hsh main.c shell.c
($) exit

Non-interactive mode:
$ echo "/bin/ls" | ./hsh
hsh main.c shell.c test_ls_2

.SH FILES
$HOME/.profile - User's login profile.
/etc/profile - System login profile.

.SH SEE ALSO
builtin(1), csh(1), echo(1), getopt(1), ksh(1), login(1), printf(1), test(1), getopt(3), passwd(5), profile(4), environ(7), execve(2), sysctl(8).

.SH HISTORY
hsh is a POSIX-compliant implementation of /bin/sh. It is a descendant of the first sh version of Unix that appeared in Version 1 AT&T UNIX in 1971, written by Ken Thompson in AT&T Bell Laboratories. The shell was rewritten in 1989 under the BSD license after the Bourne shell from AT&T System V Release 4 UNIX, which inherited the name `sh`. It was a simple command interpreter, not designed for scripting, but nonetheless introduced several innovative features to the command-line interface and led to the development of the later Unix shells.

.SH BUGS
free(): double free detected in tcache 2.

.SH AUTHORS
Prince Magutshwa, Youssef Bouryal
